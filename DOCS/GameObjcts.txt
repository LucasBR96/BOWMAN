Esse documento contém a descrição das classes que serão utilizadas nesse projeto. Estas existem em dois gruppos: Game objects, aquelas cujos os objetos interagem no mundo de jogo, e utilitarios, que servem de interface entre os game objects ou entre o mundo do jogo e o resto do código. Existe uma série de funções procedurais utilitárias que servem de auxílio para a computação do jogo mas não serão descritas nesse documento.

Todos os atributos terão seus getters e setters, e estes serão omitidos para evitar redundância. Os atributos serão acompanhados pelos seus tipos e os seus valores default, se estes existirem. Cada método tera seus argumentos descritos, também acompanhado pelo tipo, com a exceção dos métodos que apenas utilizam os atributos do objeto.


-- GAME OBJECTS

a) ArrowProfile

   Um named tuple que indica o tipo de flecha que pode ser usado. A relação com Arrow é de one-to-many

   Atributos:

   a) Mass   -> Peso da Flecha, em quilogramas. Serve para calcular o dano com o impacto, a velocidade de lançamento e o efeito da resistência do ar.
      Unidade: float ( quilogramas )
      Default: .2

   b) Length -> Comprimento da flecha.
      Unidade: float ( Metros )
      Default: .8

a) Arrow
   
   Atributos:

   a) Profile -> ArrowProfile da flecha

   b) Center -> Coordenadas do centro da flecha.
      Unidade: numpy.ndarray([float])

   c) Speed  -> Velocidade da flecha. Também determina a sua inclinação. 
      Unidade: numpy.ndarray([float])

   d) Flying -> Indica se a flecha está livre ou presa em algum lugar ( Chão ou arqueiro adversário )
      Unidade: Booleano

   Métodos:

   a) Fly        -> Recalcula a posição da flecha
      Argumentos:
      dt -> variação do tempo ( segundos )

   b) Accelerate -> Recalcula a velocidade da flecha.
      Argumentos:
      dt -> variação do tempo ( segundos )
      g  -> aceleração da gravidade
      k  -> constante de resistência do ar

   c) GetEdges   -> Retorna as coordenadas da pontas da flecha.

   d) Lock       -> Torna Arrow.Flying em False se ela estiver colidindo com alguma coisa.


b) Bow 

   Atributos:

   a) Power -> Qual a força o arco impõe a flecha para cada metro de corda puxada
      Unidade:  float ( Newtons / Metro )
      Defaullt: 100

   b) Theta -> Ângulo que o arco faz com o eixo horizontal
      Unidade: float ( Radianos )

   c) MaxPull -> o maximo que a corda pode ser puxada
      Unidade: float ( Metro )
      Default: 1.

   d) Pull -> o quanto a corda está sendo puxada        
      Unidade: float ( Metro )

   e) WetDebuff -> O quanto do power o arco perde se estiver chovendo
      Unidade : float ( Percentual )
      Máximo  : 1.
      Mínimo  : 0.
      Default : .2

   Métodos:

   a) Loose -> inicializa uma nova flecha; lança ela ao ar; e reseta o pull do arco para zero.
      Argumentos:
      ArrType -> ArrowProfile da flecha a ser lançada

c) Bowman

-- CLASSES UTILITARIAS

d) Conv

Essa classe serve para converter a coordenadas virtuais para as coordenadas reais e vice-versa. As cordeanadas virttuais sao aquelas de mundo de jogo ( distâncias em metros, origem no canto inferior esquerdo, eixo y para cima), enquanto as reais são aquelas referentes a tela do pplay

   Atributos:

   a) Center -> Origem do sistema virtual descrito pelo sistema real

   b) Mat    -> Matriz transformadora do sitema virtual para o real

   c) Inv    -> Inversa de Mat. Inverter uma matriz é uma operação custosa e como a matriz é a mesma então é melhor calcular na hora que Conv é inicializado. transforma do real para o virtual
   
   Obs: Cada uma desses atributos tem a mesma unidade: numpy.ndarray de floats

   Métodos:

   a) FromVirt -> converter Coordenadas virtuais em reais
      Argumentos:
      VirtualX - > posição virtual x.
      VirtualY - > posição virtual y.

   b) ToVirt   -> converter Coordenadas reais em virtuais
      Argumentos:
      RealX - > posição real x.
      RealY - > posição real y.
   
e) Match
f) Camera
